name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev protobuf-compiler

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Download and install protoc
          Invoke-WebRequest -Uri https://github.com/protocolbuffers/protobuf/releases/download/v21.9/protoc-21.9-win64.zip -OutFile protoc.zip
          Expand-Archive protoc.zip -DestinationPath C:\Protoc
          [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;C:\Protoc\protoc-21.9-win64\bin", [EnvironmentVariableTarget]::Machine)
          # Install OpenSSL
          Invoke-WebRequest -Uri https://slproweb.com/download/Win64OpenSSL-1_1_1L.exe -OutFile openssl.exe
          Start-Process -Wait -FilePath openssl.exe -Args "/SILENT /COMPONENTS=openssl /VERYSILENT /NORESTART"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: danube-broker-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/danube-broker${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v3
        with:
          name: danube-broker-x86_64-unknown-linux-gnu
          path: artifacts/linux/

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: danube-broker-x86_64-pc-windows-gnu
          path: artifacts/windows/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/linux/danube-broker
          asset_name: danube-broker-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows/danube-broker.exe
          asset_name: danube-broker-windows.exe
          asset_content_type: application/octet-stream

  docker:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/danube-broker:${{ github.ref }} .

      - name: Push Docker image
        run: docker push ghcr.io/${{ github.repository_owner }}/danube-broker:${{ github.ref }}

      - name: Update Release Notes with Docker Image
        run: |
          IMAGE_URL="ghcr.io/${{ github.repository_owner }}/danube-broker:${{ github.ref }}"
          RELEASE_URL="https://api.github.com/repos/${{ github.repository_owner }}/$(basename ${{ github.repository }} .git)/releases/tags/${{ github.ref }}"
          PAYLOAD=$(echo '{}' | jq --arg body "Docker Image: $IMAGE_URL" '{body: $body}')
          curl -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Content-Type: application/json" \
               --data "$PAYLOAD" \
               "$RELEASE_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}