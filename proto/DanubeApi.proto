syntax = "proto3";

package danube;

service Danube {
    // Creates a new Producer on a topic
    rpc CreateProducer(ProducerRequest) returns (ProducerResponse);

    // Creates a new Subscriber
    rpc Subscribe(ConsumerRequest) returns (ConsumerResponse);

    // Sends a message from the Producer
    rpc SendMessage(MessageRequest) returns (MessageResponse);

    // Acknowledges receipt of a message from the Consumer
    // rpc Ack(AckRequest) returns (AckResponse);
}

enum ProducerAccessMode {
    Shared = 0; // multiple producers can publish on a topic
    Exclusive = 1; // exclusive access for producer
}

message ProducerRequest { 
    uint64 request_id = 1;
    string producer_name = 3;
    string topic_name = 4;
    Schema schema = 5;
    ProducerAccessMode producer_access_mode = 6;
}
message ProducerResponse {
    uint64 request_id = 1 ;
    uint64 producer_id = 2;
    string producer_name = 3;
} 

message ConsumerRequest {
    uint64 request_id = 1;
    uint64 consumer_name = 2;
    string subscription_name = 3;
    string topic_name = 4;
    Schema schema = 5;
}

message ConsumerResponse {
    uint64 request_id =1;
    uint64 consumer_id = 2;
    string consumer_name = 3;
}

message MessageRequest {
    uint64 request_id =1;
    uint64 producer_id = 2;
    MessageMetadata metadata = 3;
    bytes message = 4;
}

message MessageResponse {
    uint64 request_id = 1;
    uint64 message_id = 2;
}

message MessageMetadata {
    // Identifies the name of the producer that sent the message.
    string producer_name = 1;
    // Represents the sequence ID of the message within the topic
    // this is critical to maintain the messages order that are consumed by consumers 
    uint64 sequence_id = 2;
    // Indicates the time when the message was published
    uint64 publish_time = 3;
}

service Discovery {
    // Query the Pulsar cluster for information about a specific topic.
    // returns metadata about the topic, including the broker(s) responsible for it.
    rpc TopicLookup(TopicLookupRequest) returns (TopicLookupResponse);
    // Get the schema associated with the topic
    rpc GetSchema(SchemaRequest) returns (SchemaResponse);
}

message TopicLookupRequest {
    uint64 request_id = 1;
    string topic = 2;
}

message TopicLookupResponse {
    enum LookupType {
        Redirect = 0;
        Connect  = 1;
        Failed   = 2;
    }
    uint64 request_id = 3;
    LookupType response = 4;
    string brokerServiceUrl = 5;
}

message SchemaRequest {
    uint64 request_id = 1;
    string topic = 2;
}

message SchemaResponse {
    uint64 request_id = 1;
    Schema schema = 2;
}

message Schema {
    enum TypeSchema {
        Bytes = 0;
        String = 1;
        Int64 = 2;
        JSON = 3;
    }

    string name = 1;
    bytes schema_data = 3;
    TypeSchema type_schema = 4;
}